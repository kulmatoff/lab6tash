import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";

const fetchData = async (endpoint, token, setData) => {
  const res = await fetch(`http://localhost:5000/api/reports/${endpoint}`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  const result = await res.json();
  setData(result.data || []);
};

const buildTable = (columns, data) => (
  <table className="w-full text-sm bg-white/60 backdrop-blur-lg border border-rose-300 rounded-3xl shadow-lg">
    <thead className="bg-rose-200/50">
      <tr>
        {columns.map((col, i) => (
          <th key={i} className="px-4 py-2 border-b border-rose-300 font-bold text-rose-900 tracking-wide text-left uppercase">
            {col}
          </th>
        ))}
      </tr>
    </thead>
    <tbody>
      {data.map((row, i) => (
        <tr key={i} className={i % 2 === 0 ? "bg-rose-50/70 hover:bg-rose-100 transition" : "bg-rose-100/80 hover:bg-rose-200 transition"}>
          {columns.map((col, j) => (
            <td key={j} className="px-4 py-2 border-b border-rose-200 text-rose-900">{row[col]}</td>
          ))}
        </tr>
      ))}
    </tbody>
  </table>
);

const createReport = (title, endpoint, columns) => {
  return () => {
    const [data, setData] = useState([]);
    const token = localStorage.getItem("token");

    useEffect(() => {
      fetchData(endpoint, token, setData);
    }, [token]);

    return (
      <div className="min-h-screen bg-gradient-to-br from-rose-100 via-pink-200 to-rose-100 p-8 font-serif text-rose-900">
        <h2 className="text-5xl font-extrabold text-center mb-10 tracking-wide drop-shadow-md">{title}</h2>
        {buildTable(columns, data)}
      </div>
    );
  };
};

export const ClientOrdersReport = () => {
  const [data, setData] = useState([]);
  const token = localStorage.getItem("token");
  const user = JSON.parse(atob(token.split('.')[1]));
  const clientId = user?.id;
  const userType = user?.userType;
  const navigate = useNavigate();

  const fetchOrders = async () => {
    if (!clientId) return;
    const res = await fetch(`http://localhost:5000/api/reports/client-orders/${clientId}`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const json = await res.json();
    setData(json.data || []);
  };

  useEffect(() => {
    fetchOrders();
  }, [clientId, token]);

  const cancelOrder = async (orderId) => {
    const reason = prompt("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:");
    if (!reason) return;
    const res = await fetch("http://localhost:5000/api/orders/cancel", {
      method: "POST",
      headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
      body: JSON.stringify({ Order_ID: orderId, Reason: reason, Employee_ID: userType === "seller" ? clientId : null }),
    });
    const result = await res.json();
    if (result.success) {
      alert("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω.");
      fetchOrders();
    } else {
      alert("–û—à–∏–±–∫–∞: " + result.message);
    }
  };

  const columns = ["‚Ññ –∑–∞–∫–∞–∑–∞", "–î–∞—Ç–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "‚Ññ –Ω–∞–∫–ª–∞–¥–Ω–æ–π", "–°—Ç–∞—Ç—É—Å"];

  return (
    <div className="min-h-screen bg-gradient-to-br from-rose-100 via-pink-200 to-rose-100 p-8 font-serif text-rose-900">
      <h2 className="text-4xl font-bold text-center mb-8">üõí –ó–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞</h2>
      <table className="w-full bg-white/60 backdrop-blur-lg border border-rose-300 rounded-3xl shadow-lg text-sm">
        <thead className="bg-rose-200/50">
          <tr>
            {columns.map((col, i) => (
              <th key={i} className="px-4 py-3 border-b border-rose-300 font-bold text-left tracking-wide">{col}</th>
            ))}
            <th className="px-4 py-3 border-b border-rose-300 font-bold text-left">–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {data.map((row, i) => {
            const canCancel = userType === "client" || userType === "seller";
            const isPending = row["–°—Ç–∞—Ç—É—Å"] !== "–û—Ç–º–µ–Ω—ë–Ω";
            return (
              <tr key={i} className={i % 2 === 0 ? "bg-rose-50/70 hover:bg-rose-100 transition" : "bg-rose-100/80 hover:bg-rose-200 transition"}>
                {columns.map((col, j) => (
                  <td key={j} className="px-4 py-3 border-b border-rose-200">{row[col]}</td>
                ))}
                <td className="px-4 py-3 border-b border-rose-200">
                  <button
                    onClick={() => navigate(`/client-order/${row["‚Ññ –∑–∞–∫–∞–∑–∞"]}`)}
                    className="text-pink-600 hover:underline mr-4 font-bold"
                  >
                    –û—Ç–∫—Ä—ã—Ç—å
                  </button>
                  {canCancel && isPending && (
                    <button
                      onClick={() => cancelOrder(row["‚Ññ –∑–∞–∫–∞–∑–∞"])}
                      className="text-red-600 hover:underline font-bold"
                    >
                      –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>
                  )}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};
export const SellersClientOrdersReport = () => {
  const [data, setData] = useState([]);
  const token = localStorage.getItem("token");
  const user = JSON.parse(atob(token.split('.')[1]));
  const clientId = user?.id;
  const userType = user?.userType;
  const navigate = useNavigate();

  const fetchOrders = async () => {
    const res = await fetch(`http://localhost:5000/api/reports/get-all-orders`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const json = await res.json();
    setData(json.data || []);
  };

  useEffect(() => {
    fetchOrders();
  }, [clientId, token]);

  const cancelOrder = async (orderId) => {
    const reason = prompt("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:");
    if (!reason) return;
    const res = await fetch("http://localhost:5000/api/orders/cancel", {
      method: "POST",
      headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
      body: JSON.stringify({ Order_ID: orderId, Reason: reason, Employee_ID: userType === "seller" ? clientId : null }),
    });
    const result = await res.json();
    if (result.success) {
      alert("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω.");
      fetchOrders();
    } else {
      alert("–û—à–∏–±–∫–∞: " + result.message);
    }
  };

  const columns = ["‚Ññ –∑–∞–∫–∞–∑–∞", "–î–∞—Ç–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "‚Ññ –Ω–∞–∫–ª–∞–¥–Ω–æ–π", "–°—Ç–∞—Ç—É—Å"];

  return (
    <div className="min-h-screen bg-gradient-to-br from-rose-100 via-pink-200 to-rose-100 p-8 font-serif text-rose-900">
      <h2 className="text-4xl font-bold text-center mb-8">üõí –í—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤</h2>
      <table className="w-full bg-white/60 backdrop-blur-lg border border-rose-300 rounded-3xl shadow-lg text-sm">
        <thead className="bg-rose-200/50">
          <tr>
            {columns.map((col, i) => (
              <th key={i} className="px-4 py-3 border-b border-rose-300 font-bold text-left tracking-wide">{col}</th>
            ))}
            <th className="px-4 py-3 border-b border-rose-300 font-bold text-left">–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {data.map((row, i) => {
            const canCancel = userType === "client" || userType === "seller";
            const isPending = row["–°—Ç–∞—Ç—É—Å"] !== "–û—Ç–º–µ–Ω—ë–Ω";
            return (
              <tr key={i} className={i % 2 === 0 ? "bg-rose-50/70 hover:bg-rose-100 transition" : "bg-rose-100/80 hover:bg-rose-200 transition"}>
                {columns.map((col, j) => (
                  <td key={j} className="px-4 py-3 border-b border-rose-200">{row[col]}</td>
                ))}
                <td className="px-4 py-3 border-b border-rose-200">
                  <button
                    onClick={() => navigate(`/client-order/${row["‚Ññ –∑–∞–∫–∞–∑–∞"]}`)}
                    className="text-pink-600 hover:underline mr-4 font-bold"
                  >
                    –û—Ç–∫—Ä—ã—Ç—å
                  </button>
                  {canCancel && isPending && (
                    <button
                      onClick={() => cancelOrder(row["‚Ññ –∑–∞–∫–∞–∑–∞"])}
                      className="text-red-600 hover:underline font-bold"
                    >
                      –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>
                  )}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export const AddClientContact = () => {
  const [contactType, setContactType] = useState("phone");
  const [contactInfo, setContactInfo] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const token = localStorage.getItem("token");

  const contactTypeMap = { phone: 1, email: 2 };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!contactInfo.trim()) {
      setErrorMessage("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }
    try {
      const response = await fetch("http://localhost:5000/api/clients/contact", {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
        body: JSON.stringify({
          Contact_Info: contactInfo,
          Contact_Type_ID: contactTypeMap[contactType]
        })
      });
      const result = await response.json();
      if (result.success) {
        setSuccessMessage("üå∏ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.");
        setContactInfo("");
        setErrorMessage("");
      } else {
        setErrorMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.");
        setSuccessMessage("");
      }
    } catch (error) {
      setErrorMessage("–û—à–∏–±–∫–∞: " + error.message);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-rose-100 via-pink-200 to-rose-100 flex items-center justify-center px-6 py-12 font-serif text-rose-900">
      <form onSubmit={handleSubmit} className="w-full max-w-md bg-white/60 backdrop-blur-lg p-8 rounded-3xl border border-rose-300 shadow-2xl space-y-6">
        <h2 className="text-4xl font-bold text-center mb-6 tracking-wide drop-shadow-md">üìû –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç</h2>

        <div>
          <label className="block mb-1 font-semibold">–¢–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞</label>
          <select
            value={contactType}
            onChange={(e) => setContactType(e.target.value)}
            className="w-full border px-4 py-2 rounded-xl bg-rose-50/70 border-rose-300 focus:ring-pink-400"
          >
            <option value="phone">–¢–µ–ª–µ—Ñ–æ–Ω</option>
            <option value="email">Email</option>
          </select>
        </div>

        <div>
          <label className="block mb-1 font-semibold">–ö–æ–Ω—Ç–∞–∫—Ç</label>
          <input
            type="text"
            value={contactInfo}
            onChange={(e) => setContactInfo(e.target.value)}
            placeholder={contactType === "phone" ? "+996 700 000 000" : "example@mail.com"}
            className="w-full border px-4 py-2 rounded-xl bg-rose-50/70 border-rose-300 focus:ring-pink-400"
          />
        </div>

        {errorMessage && <p className="text-red-600 font-medium">{errorMessage}</p>}
        {successMessage && <p className="text-green-600 font-medium">{successMessage}</p>}

        <button
          type="submit"
          className="w-full py-3 bg-gradient-to-r from-pink-400 to-rose-300 hover:brightness-110 rounded-full font-bold text-rose-900 shadow-lg"
        >
          üå∏ –î–æ–±–∞–≤–∏—Ç—å
        </button>
      </form>
    </div>
  );
};
export const ClientPaymentReport = () => {
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [data, setData] = useState([]);
  const [error, setError] = useState("");

  const token = localStorage.getItem("token");

  const fetchPayments = async () => {
    if (!startDate || !endDate) {
      setError("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–µ –¥–∞—Ç—ã.");
      return;
    }
    try {
      const res = await fetch(`http://localhost:5000/api/reports/order-payments?StartDate=${startDate}&EndDate=${endDate}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      const result = await res.json();
      if (result.success) {
        setData(result.data || []);
        setError("");
      } else {
        setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.");
      }
    } catch (err) {
      setError("–û—à–∏–±–∫–∞: " + err.message);
    }
  };

  const columns = ["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ", "–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã"];

  return (
    <div className="min-h-screen bg-gradient-to-br from-rose-100 via-pink-200 to-rose-100 p-8 font-serif text-rose-900">
      <h2 className="text-5xl font-extrabold text-center mb-10 tracking-wide drop-shadow-md">üí≥ –û—Ç—á—ë—Ç –ø–æ –æ–ø–ª–∞—Ç–∞–º</h2>

      <div className="flex gap-6 flex-wrap items-end mb-8 justify-center">
        <div>
          <label className="block mb-1 font-semibold">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
          <input type="date" value={startDate} onChange={e => setStartDate(e.target.value)} className="border border-rose-300 px-4 py-2 rounded-xl bg-rose-50/70" />
        </div>
        <div>
          <label className="block mb-1 font-semibold">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
          <input type="date" value={endDate} onChange={e => setEndDate(e.target.value)} className="border border-rose-300 px-4 py-2 rounded-xl bg-rose-50/70" />
        </div>
        <button
          onClick={fetchPayments}
          className="bg-gradient-to-r from-pink-400 to-rose-300 hover:brightness-110 px-6 py-3 rounded-full font-bold text-rose-900 shadow-md"
        >
          üå∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>

      {error && <p className="text-red-600 text-center mb-6 font-semibold">{error}</p>}

      <div className="overflow-x-auto rounded-3xl shadow-2xl backdrop-blur-lg bg-white/60 border border-rose-300 p-6">
        <table className="w-full text-sm text-rose-900">
          <thead className="bg-rose-200/50">
            <tr>{columns.map((col, i) => <th key={i} className="px-4 py-3 border-b border-rose-300 text-left font-bold uppercase tracking-wide">{col}</th>)}</tr>
          </thead>
          <tbody>
            {data.map((row, i) => (
              <tr key={i} className={i % 2 === 0 ? "bg-rose-50/70 hover:bg-rose-100 transition" : "bg-rose-100/80 hover:bg-rose-200 transition"}>
                {columns.map((col, j) => <td key={j} className="px-4 py-3 border-b border-rose-200">{row[col]}</td>)}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};
export const BreakEvenReportPage = createReport(
  "üìâ –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏",
  "break-even",
  ["–ù–æ–º–µ—Ä", "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞", "–¢–æ–≤–∞—Ä", "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏", "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", "–ü—Ä–∏–±—ã–ª—å"]
);

export const ClientDebtsReport = createReport(
  "üí∞ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
  "client-debts",
  ["‚Ññ –∑–∞–∫–∞–∑–∞", "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ", "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã", "–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"]
);

export const WarehouseRemaindersReport = createReport(
  "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫",
  "warehouse-remainder",
  ["–ù–æ–º–µ—Ä", "–¢–∏–ø —Ç–æ–≤–∞—Ä–æ–≤", "–¢–æ–≤–∞—Ä", "–¶–µ–Ω–∞", "–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", "–ü—Ä–æ–¥–∞–Ω–æ", "–û—Å—Ç–∞—Ç–æ–∫", "–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", "–ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞"]
);

export const OrdersSummaryReport = createReport(
  "üì¶ –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤",
  "orders-summary",
  ["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–°–æ—Å—Ç–æ—è–Ω–∏–µ", "–¢–∏–ø –∑–∞–∫–∞–∑–∞", "–ö –æ–ø–ª–∞—Ç–µ"]
);

export const PromotionsReport = createReport(
  "üéâ –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏",
  "sales-promotions",
  ["–ù–æ–º–µ—Ä", "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏", "–°–∫–∏–¥–∫–∞", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"]
);

export const SupplierDebtReport = createReport(
  "üì¶ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
  "supplier-debt",
  ["–ù–æ–º–µ—Ä", "–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–î–µ–¥–ª–∞–π–Ω", "–°—É–º–º–∞ –æ–ø–ª–∞—Ç–µ", "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å"]
);

export const ProfitLossReport = createReport(
  "üìä –ü—Ä–∏–±—ã–ª—å –∏ —É–±—ã—Ç–∫–∏",
  "profit-loss",
  ["–ù–æ–º–µ—Ä", "–†–∞—Å—Ö–æ–¥", "–î–æ—Ö–æ–¥—ã", "–ù–∞–ª–æ–≥–∏", "–ü—Ä–∏–±—ã–ª—å"]
);

export const ProductProfitReport = createReport(
  "üìà –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞",
  "supply-product-profit",
  ["–ù–æ–º–µ—Ä", "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞", "–¢–æ–≤–∞—Ä", "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏", "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", "–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", "–ü—Ä–∏–±—ã–ª—å"]
);

export const TaxesReport = createReport(
  "üßæ –ù–∞–ª–æ–≥–∏",
  "taxes",
  ["–ù–æ–º–µ—Ä", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ª–æ–≥–∞", "–°—É–º–º–∞", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"]
);

export const SalariesReport = createReport(
  "üíº –ó–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
  "salaries",
  ["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–ù–∞—á–∏—Å–ª–µ–Ω–Ω–æ", "–û–ø–ª–∞—á–µ–Ω–æ", "–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"]
);

export const SupplyPaymentsReport = createReport(
  "üí∏ –û–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–æ–∫",
  "supply-payments",
  ["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–¢–∏–ø –æ–ø–ª–∞—Ç—ã"]
);

export const DefectiveProductsReport = createReport(
  "üö´ –ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
  "defective-products",
  ["–ù–æ–º–µ—Ä", "–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏", "–¢–∏–ø —Ç–æ–≤–∞—Ä–æ–≤", "–¢–æ–≤–∞—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–ü–æ—Å—Ç–∞–≤—â–∏–∫"]
);

export const WarehouseProductsReport = createReport(
  "üè¨ –¢–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ",
  "warehouse-products",
  ["–ù–æ–º–µ—Ä", "–¢–∏–ø —Ç–æ–≤–∞—Ä–æ–≤", "–¢–æ–≤–∞—Ä", "–¶–µ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", "–ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞"]
);

export const PriceListReport = createReport(
  "üßæ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç",
  "price-list",
  ["–ù–æ–º–µ—Ä", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞", "–¢–æ–≤–∞—Ä", "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞"]
);

export const OrderCompositionReport = createReport(
  "üßæ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞",
  "order-composition",
  ["‚Ññ —Å—Ç—Ä–æ–∫–∏", "–¢–æ–≤–∞—Ä", "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ç–æ–∏–º–æ—Å—Ç—å"]
);

export const CanceledOrdersReport = createReport(
  "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã",
  "canceled-orders",
  ["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã", "–¢–∏–ø –æ–ø–ª–∞—Ç—ã"]
);

export const ProductSalesReport = createReport(
  "üì¶ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º",
  "product-sales",
  ["–ù–æ–º–µ—Ä", "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞", "–¢–æ–≤–∞—Ä", "–¶–µ–Ω–∞", "–ö–æ–ª-–≤–æ"]
);

export const SalesByClientsReport = createReport(
  "üë• –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º",
  "sales-by-clients",
  ["–ù–æ–º–µ—Ä", "–§–ò–û", "–û–ø–ª–∞—á–µ–Ω–æ", "–°–∫–∏–¥–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞", "–ê–∫—Ü–∏—è"]
);

export const SalesByWarehouseReport = createReport(
  "üì¶ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Å–∫–ª–∞–¥—É",
  "sales-by-warehouse",
  ["–ù–æ–º–µ—Ä", "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞", "–¢–æ–≤–∞—Ä", "–¶–µ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
);
